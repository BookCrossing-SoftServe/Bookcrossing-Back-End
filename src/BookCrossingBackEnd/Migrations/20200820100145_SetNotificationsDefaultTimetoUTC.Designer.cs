// <auto-generated />
using System;
using Infrastructure.RDBMS;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookCrossingBackEnd.Migrations
{
    [DbContext(typeof(BookCrossingContext))]
    [Migration("20200820100145_SetNotificationsDefaultTimetoURC")]
    partial class SetNotificationsDefaultTimetoUTC
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.RDBMS.Entities.Aphorism", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<string>("Phrase")
                        .HasColumnName("phrase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhraseAuthor")
                        .IsRequired()
                        .HasColumnName("phraseAuthor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Aphorism");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsCurrent = false,
                            Phrase = "…Учітесь,читайте,і чужому научайтесь,й свого не цурайтесь.",
                            PhraseAuthor = "Taras Shevchenko"
                        },
                        new
                        {
                            Id = 2,
                            IsCurrent = false,
                            Phrase = "Без книг порожнє людське життя",
                            PhraseAuthor = "Д. Бідний"
                        },
                        new
                        {
                            Id = 3,
                            IsCurrent = false,
                            Phrase = "Strange thoughts brew in your heart when you spend too much time with old books",
                            PhraseAuthor = "Aravind Adiga"
                        },
                        new
                        {
                            Id = 4,
                            IsCurrent = false,
                            Phrase = "Читання – це звичка, до якої не звикають, а хворіють на неї",
                            PhraseAuthor = "Д. Лихачов"
                        },
                        new
                        {
                            Id = 5,
                            IsCurrent = false,
                            Phrase = "Access to knowledge is the superb, the supreme act of truly great civilizations. Of all the institutions that purport to do this, free libraries stand virtually alone in accomplishing this mission",
                            PhraseAuthor = "Toni Morrison"
                        },
                        new
                        {
                            Id = 6,
                            IsCurrent = false,
                            Phrase = "…Учітесь, читайте, і чужому научайтесь, й свого не цурайтесь.",
                            PhraseAuthor = "Т. Шевченко"
                        },
                        new
                        {
                            Id = 7,
                            IsCurrent = false,
                            Phrase = "The man who does not read good books has no advantage over the man who cannot read them.",
                            PhraseAuthor = "Mark Twain"
                        },
                        new
                        {
                            Id = 8,
                            IsCurrent = false,
                            Phrase = "Книга… залишається німою не тільки для того, хто не вміє читати, а й для того, хто… не уміє витягти з мертвої букви живої думки",
                            PhraseAuthor = "К. Ушинський"
                        },
                        new
                        {
                            Id = 9,
                            IsCurrent = false,
                            Phrase = "The First Book: Go ahead, it won't bite. Well... maybe a little. More a nip, like. A tingle. It's pleasurable, really. You see, it keeps on opening. You may fall in. Sure, it's hard to get started; remember learning to use knife and fork? Dig in: you'll never reach bottom. It's not like it's the end of the world -- just the world as you think you know it.",
                            PhraseAuthor = "Rita Dove"
                        },
                        new
                        {
                            Id = 10,
                            IsCurrent = false,
                            Phrase = "Книги - це ріки, що наповнюють моря",
                            PhraseAuthor = "Я. Мудрий"
                        },
                        new
                        {
                            Id = 11,
                            IsCurrent = false,
                            Phrase = "Reading is to the mind what exercise is to the body",
                            PhraseAuthor = "Joseph Addison"
                        },
                        new
                        {
                            Id = 12,
                            IsCurrent = false,
                            Phrase = "Кожна книга – крадіжка у власного життя. Чим більше читаєш, тим менше вмієш і хочеш жити сам",
                            PhraseAuthor = "М. Цвєтаєва"
                        },
                        new
                        {
                            Id = 13,
                            IsCurrent = false,
                            Phrase = "The greatest gift is a passion for reading. It is cheap, it consoles, it distracts, it excites, it gives you the knowledge of the world and experience of a wide kind. It is a moral illumination. ",
                            PhraseAuthor = "Elizabeth Hardwick"
                        },
                        new
                        {
                            Id = 14,
                            IsCurrent = false,
                            Phrase = "Книги – люди в палітурках",
                            PhraseAuthor = "А. Макаренко"
                        },
                        new
                        {
                            Id = 15,
                            IsCurrent = false,
                            Phrase = "The book is good which puts me in a working mind",
                            PhraseAuthor = "Ralph Waldo Emerson"
                        },
                        new
                        {
                            Id = 16,
                            IsCurrent = false,
                            Phrase = "Є у мене товариші вірні – книжки добрії",
                            PhraseAuthor = "М. Грушевський"
                        },
                        new
                        {
                            Id = 17,
                            IsCurrent = false,
                            Phrase = "Writing a book of poetry is like dropping a rose petal down the Grand Canyon and waiting for the echo",
                            PhraseAuthor = "Don Marquis"
                        },
                        new
                        {
                            Id = 18,
                            IsCurrent = false,
                            Phrase = "Хто полюбить книгу, той далеко піде у своєму розвитку. Книга рятує душу від здерев’яніння",
                            PhraseAuthor = "Т. Шевченко"
                        },
                        new
                        {
                            Id = 19,
                            IsCurrent = false,
                            Phrase = "From the moment I picked your book up until I laid it down I was convulsed with laughter. Some day I intend reading it.",
                            PhraseAuthor = "Groucho Marx"
                        },
                        new
                        {
                            Id = 20,
                            IsCurrent = false,
                            Phrase = "…Дивною і ненатуральною здається людина, яка існує без книги",
                            PhraseAuthor = "Т. Шевченко"
                        },
                        new
                        {
                            Id = 21,
                            IsCurrent = false,
                            Phrase = "Literature is my Utopia. Here I am not disenfranchised. No barrier of the senses shuts me out from the sweet, gracious discourses of my book friends. They talk to me without embarrassment or awkwardness.",
                            PhraseAuthor = "Helen Keller"
                        },
                        new
                        {
                            Id = 22,
                            IsCurrent = false,
                            Phrase = "Кімната без книг – все одно, що людина без душі.",
                            PhraseAuthor = "О. Довженко"
                        },
                        new
                        {
                            Id = 23,
                            IsCurrent = false,
                            Phrase = "The mere brute pleasure of reading -- the sort of pleasure a cow must have in grazing.",
                            PhraseAuthor = "G. K. Chesterton"
                        },
                        new
                        {
                            Id = 24,
                            IsCurrent = false,
                            Phrase = "Є злочини гірші, ніж спалювати книги. Наприклад - не читати їх.",
                            PhraseAuthor = "Р. Бербері"
                        },
                        new
                        {
                            Id = 25,
                            IsCurrent = false,
                            Phrase = "I am a part of all I have read.",
                            PhraseAuthor = "John Kieran"
                        },
                        new
                        {
                            Id = 26,
                            IsCurrent = false,
                            Phrase = "Людину можна пізнати по тих книгах, які вона читає",
                            PhraseAuthor = "С. Самолов"
                        },
                        new
                        {
                            Id = 27,
                            IsCurrent = false,
                            Phrase = "The books that the world calls immoral are the books that show the world its own shame.",
                            PhraseAuthor = "Oscar Wilde"
                        },
                        new
                        {
                            Id = 28,
                            IsCurrent = false,
                            Phrase = "У книгах ми жадібно читаємо про те, на що не звертаємо уваги в житті.",
                            PhraseAuthor = "Е. Кроткий"
                        },
                        new
                        {
                            Id = 29,
                            IsCurrent = false,
                            Phrase = "Perhaps there is some sort of secret homing instinct in books that brings them to their perfect readers.",
                            PhraseAuthor = "Mary Ann Shaffer and Annie Barrows"
                        },
                        new
                        {
                            Id = 30,
                            IsCurrent = false,
                            Phrase = "Три найсмачніші запахи? Запах гарячої кави, свіжої випічки і сторінок нової книги",
                            PhraseAuthor = "Н. Ясмінська"
                        },
                        new
                        {
                            Id = 31,
                            IsCurrent = false,
                            Phrase = "Writing is so difficult that I often feel that writers, having had their hell on earth, will escape punishment in the hereafter.",
                            PhraseAuthor = "Jessamyn West"
                        },
                        new
                        {
                            Id = 32,
                            IsCurrent = false,
                            Phrase = "Книги – морська глибина: Хто в них пірне аж до дна, той, хоч і труду мав досить дивнії перлини виносить.",
                            PhraseAuthor = "-	І. Франко"
                        },
                        new
                        {
                            Id = 33,
                            IsCurrent = false,
                            Phrase = "It is books that are a key to the wide world; if you can't do anything else, read all that you can. ",
                            PhraseAuthor = "Jane Hamilton"
                        },
                        new
                        {
                            Id = 34,
                            IsCurrent = false,
                            Phrase = "Руйнуються царства, а книги живуть!",
                            PhraseAuthor = "M. Грибачов"
                        },
                        new
                        {
                            Id = 35,
                            IsCurrent = false,
                            Phrase = "I wrote my first novel because I wanted to read it. ",
                            PhraseAuthor = "Toni Morrison"
                        },
                        new
                        {
                            Id = 36,
                            IsCurrent = false,
                            Phrase = "Книга - велика річ, поки людина вміє нею користуватися",
                            PhraseAuthor = "O. Блок"
                        },
                        new
                        {
                            Id = 37,
                            IsCurrent = false,
                            Phrase = "Everything in the world exists in order to end up as a book. ",
                            PhraseAuthor = "Stéphane Mallarmé"
                        },
                        new
                        {
                            Id = 38,
                            IsCurrent = false,
                            Phrase = "Читання може бути трояке: перше - читати і не розуміти; друге - читати і розуміти; третє - читати і розуміти навіть те, чого не написано. ",
                            PhraseAuthor = "-	Я. Княжнін"
                        },
                        new
                        {
                            Id = 39,
                            IsCurrent = false,
                            Phrase = "He felt about books as doctors feel about medicines, or managers about plays -- cynical but hopeful.",
                            PhraseAuthor = "-	Dame Rose Macauley"
                        },
                        new
                        {
                            Id = 40,
                            IsCurrent = false,
                            Phrase = "Моя відрада - уявний політ над книгами зі сторінки на сторінку",
                            PhraseAuthor = "М. Рубакін"
                        });
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("firstname")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsConfirmed")
                        .HasColumnName("is_confirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("lastname")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Author");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Bernard",
                            IsConfirmed = true,
                            LastName = "Fernandez"
                        });
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ImagePath")
                        .HasColumnName("imagepath")
                        .HasColumnType("nvarchar(260)")
                        .HasMaxLength(260);

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Notice")
                        .HasColumnName("notice")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Publisher")
                        .HasColumnName("publisher")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<double>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rating")
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .HasDefaultValue("Available");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAdded = new DateTime(2020, 8, 20, 13, 1, 43, 971, DateTimeKind.Local).AddTicks(9242),
                            LanguageId = 1,
                            Name = "Adventures of Junior",
                            Rating = 0.0,
                            State = "Available",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.BookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnName("book_id")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnName("author_id")
                        .HasColumnType("int");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthor");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1
                        });
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.BookGenre", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnName("book_id")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnName("genre_id")
                        .HasColumnType("int");

                    b.HasKey("BookId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("BookGenre");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            GenreId = 1
                        });
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fantasy"
                        });
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ukrainian"
                        });
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("bit");

                    b.Property<string>("OfficeName")
                        .HasColumnName("office_name")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnName("street")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Lviv",
                            IsActive = true,
                            OfficeName = "SoftServe",
                            Street = "Gorodoc'kogo"
                        });
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnName("book_id")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerId")
                        .HasColumnName("owner_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnName("receive_date")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnName("request_date")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("UserId");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.ResetPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConfirmationNumber")
                        .IsRequired()
                        .HasColumnName("confirmation_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResetDate")
                        .HasColumnName("reset_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ResetPassword");
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.ScheduleJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RequestId")
                        .HasColumnName("requestId")
                        .HasColumnType("int");

                    b.Property<string>("ScheduleId")
                        .IsRequired()
                        .HasColumnName("scheduleId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ScheduleJob");
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("birth_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("firstname")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("IsEmailAllowed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("email_allowed")
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("lastname")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("MiddleName")
                        .HasColumnName("middlename")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisteredDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("registered_date")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("role_id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("UserRoomId")
                        .HasColumnName("user_room_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserRoomId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            IsEmailAllowed = false,
                            LastName = "Adminovich",
                            MiddleName = "Adminovski",
                            Password = "admin",
                            RegisteredDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2
                        },
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "test@gmail.com",
                            FirstName = "Tester",
                            IsEmailAllowed = false,
                            LastName = "Testerovich",
                            MiddleName = "Test",
                            Password = "test",
                            RegisteredDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 1,
                            UserRoomId = 1
                        });
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.UserRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("int");

                    b.Property<string>("RoomNumber")
                        .HasColumnName("room_number")
                        .HasColumnType("nvarchar(7)")
                        .HasMaxLength(7);

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("UserRoom");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LocationId = 1,
                            RoomNumber = "4040"
                        });
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.Wish", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnName("book_id")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("Wish");
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.Book", b =>
                {
                    b.HasOne("Domain.RDBMS.Entities.Language", "Language")
                        .WithMany("Books")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.RDBMS.Entities.User", "User")
                        .WithMany("Book")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.BookAuthor", b =>
                {
                    b.HasOne("Domain.RDBMS.Entities.Author", "Author")
                        .WithMany("BookAuthor")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.RDBMS.Entities.Book", "Book")
                        .WithMany("BookAuthor")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.BookGenre", b =>
                {
                    b.HasOne("Domain.RDBMS.Entities.Book", "Book")
                        .WithMany("BookGenre")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.RDBMS.Entities.Genre", "Genre")
                        .WithMany("BookGenre")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.Notification", b =>
                {
                    b.HasOne("Domain.RDBMS.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId");

                    b.HasOne("Domain.RDBMS.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.RDBMS.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.Request", b =>
                {
                    b.HasOne("Domain.RDBMS.Entities.Book", "Book")
                        .WithMany("Request")
                        .HasForeignKey("BookId")
                        .IsRequired();

                    b.HasOne("Domain.RDBMS.Entities.User", "Owner")
                        .WithMany("RequestOwner")
                        .HasForeignKey("OwnerId");

                    b.HasOne("Domain.RDBMS.Entities.User", "User")
                        .WithMany("RequestUser")
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.User", b =>
                {
                    b.HasOne("Domain.RDBMS.Entities.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .IsRequired();

                    b.HasOne("Domain.RDBMS.Entities.UserRoom", "UserRoom")
                        .WithMany("User")
                        .HasForeignKey("UserRoomId");
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.UserRoom", b =>
                {
                    b.HasOne("Domain.RDBMS.Entities.Location", "Location")
                        .WithMany("UserRoom")
                        .HasForeignKey("LocationId")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.RDBMS.Entities.Wish", b =>
                {
                    b.HasOne("Domain.RDBMS.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.RDBMS.Entities.User", "User")
                        .WithMany("Wish")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
